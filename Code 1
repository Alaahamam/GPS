#include "stdint.h"
#include "math.h"
#include"c:/keil/ee319kware/inc/tm4c123gh6pm.h"
#include "stdlib.h"
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#define pi 3.14159265
#define r 6371000

void systeminit(){}
void readgpsmodule();
double distance;
double dis;
unsigned char c;
int num[10];
double lat = 0;
double lon = 0;
int flag = 0;
char longitudeis[20],latitudeis[20];
char dist[20];

double pastlat=0;
double pastlon=0;
// mili seconds delay function
void delay_ms(int n)
{
    int i,j;
    for(i=0;i<n;i++)
        for(j=0;j<3180;j++)
        {}
}

// micro seconds delay function
void delay_us(int n)
{
    int i,j;
    for(i=0;i<n;i++)
        for(j=0;j<3;j++)
        {}
}


void lcd_command(unsigned char com)
{

    gpio_porta_data_r=0;        //rs=0 send command, rw=0 write, e=0 initially enable=0
    delay_ms(1);
    gpio_porta_data_r |=0x40;   // e=1 (low to high) without affecting other pins
    delay_ms(1);
    gpio_portb_data_r=com;      // send command to the screen
    delay_us(1);
    gpio_porta_data_r=0;        // e=0 agian
    delay_us(1);

}



void lcd_char(unsigned char data)
{
    gpio_porta_data_r=0x80;        //rs=1 send data, rw=0 write,e=0 initially enable=0
    delay_ms(1);
    gpio_porta_data_r |=0x40;      // e=1 (low to high) without affecting other pins
    delay_ms(1);
    gpio_portb_data_r=data;        // send data to the screen
    delay_us(1);
    gpio_porta_data_r=0;           //rs=0 rw=0 e=0(back to the beginning)
    delay_us(50);
}


void lcd_string(char *str) // to print string (pointer to elements of array of char)
{
    int i;
    for(i=0;str[i]!=0;i++)  /* send each char of string  */
    {
        lcd_char(str[i]);  /* call lcd data write */
        delay_ms(20);
    }
}

void lcd_integers(int data)
{
    int p;
    int k=0;
    while(data>0)
    {
        num[k]=data%10;
        data=data/10;
        k++;
    }
    k--;
    for (p=k;p>=0;p--)
    {
        c=num[p]+48;

        gpio_porta_data_r=0x80;       //rs=1 send data, rw=0 write,e=0 initially enable=0
        delay_ms(1);
        gpio_porta_data_r |=0x40;      // e=1 (low to high) without affecting other pins
        delay_ms(1);
        gpio_portb_data_r=c;           // send data to the screen
        delay_us(1);
        gpio_porta_data_r=0;           //rs=0 rw=0 e=0(back to the beginning)
        delay_us(50);
    }
}


void lcd_separating_double(double deci)
{
    int integer_part=deci;
    int decimal_part=(deci - integer_part)*100000;

    lcd_integers(integer_part);
    lcd_char('.');
    lcd_integers(decimal_part);
}


// to convert from degrees to radian
float deg_to_rad(float deg){
    return (deg * pi / 180);
}

// measuring the distance by longitude and latitude
float total_distance(float long1, float long2, float lat1, float lat2)
{
    float dlong = deg_to_rad(long2 - long1);
    float dlat  = deg_to_rad(lat2 - lat1);
    float phi1 = deg_to_rad(lat1);
    float phi2 = deg_to_rad(lat2);
    // haversine formula
    float a = pow(sin((0.5 * dlat)), 2) + cos(phi1) * cos(phi2) * pow(sin((0.5 * dlong)), 2);
    float d = 2 * r * asin(sqrt(a));
    dis = dis + d;
    return dis;
}


void lcd_init()
{
    volatile uint32_t delay;

    sysctl_rcgcgpio_r |=0x03;    //clock register for ports a b
    delay=1;

    gpio_porta_lock_r=0x4c4f434b;   //lock for ports a b
    gpio_porta_cr_r=0xe0;
    //gpio_portb_lock_r=0x4c4f434b;
    gpio_portb_cr_r=0xff;


    gpio_porta_afsel_r=0;       //initializing porta  5 6 7
    gpio_porta_pctl_r=0;
    gpio_porta_amsel_r=0;
    gpio_porta_dir_r|=0xe0;
    gpio_porta_den_r|=0xe0;
    gpio_porta_pur_r=0;
    gpio_portb_afsel_r=0;       //initializing portb pins 0-8 for lcd
    gpio_portb_pctl_r=0;
    gpio_portb_amsel_r=0;
    gpio_portb_dir_r=0xff;
    gpio_portb_den_r=0xff;
    gpio_portb_pur_r=0;



    delay_ms(20);
    lcd_command(0x38);
    delay_us(50);
    lcd_command(0x0f);
    delay_ms(50);
    lcd_command(0x06);
    delay_ms(50);
    lcd_command(0x01);
    delay_ms(25);


}
void led_init()
{
    volatile uint32_t delay;
    sysctl_rcgcgpio_r |=0x20;    // enable the clock of port
    delay=1;
    gpio_portf_lock_r=0x4c4f434b;
    gpio_portf_cr_r=0x1f;        // enable pins
    gpio_portf_dir_r=0x0e;      // pin i/o  0/1
    gpio_portf_den_r=0x1f;      // d
    gpio_portf_amsel_r =0;      // a
    gpio_portf_afsel_r =0;
    gpio_portf_pctl_r =0;       // working i/o ports or uart
    gpio_portf_pur_r=0x11;      // for switches
}

void uart_init()
{
    sysctl_rcgcuart_r |=0x0020;    // activate uart5
    sysctl_rcgcgpio_r |=0x0010;    // enable the clock of port e4,5
    
    uart5_ctl_r &=~(0x01);
    uart5_ibrd_r =104;
    uart5_fbrd_r =11;
    uart5_lcrh_r |=0x0070;
    uart5_ctl_r |=0x0301;
    
    gpio_porte_den_r |=0x0030;      // d    e4,5
    gpio_porte_amsel_r &=~0x0030;       //  d
    gpio_porte_afsel_r |=0x0030;
    gpio_porte_pctl_r =(gpio_porte_pctl_r&0xff00ffff)+0x00110000;           // working i/o ports or uart
}
int main()
{
    //scb->cpacr |= ((3ul << 10*2) | (3ul << 11*2) );

    lcd_init();
    uart_init();
    led_init();

    while(1)
    {

        if(distance<100){

        readgpsmodule();



          //lcd_command(0xc0);
         // lcd_string(latitudeis);
          if(flag == 0) flag = 1;
          else
    
          distance += total_distance(pastlon, lon, pastlat,lat);
          pastlat = lat;
          pastlon = lon;
          sprintf(dist,"%f",distance);
          lcd_command(0x01);
          lcd_string(dist);
    
          delay_ms(1000);
          }


        if (distance>=100)
        {
            gpio_portf_data_r=0x02;
        }
        else
        {
            gpio_portf_data_r=0;
        }

    }

}
void readgpsmodule(){
    int check = 0;
    char gps_values[100],*token,parsevalue[12][20];
    double latitude=0.0,longitude=0.0,seconds=0.0,minutes=0.0,lat=0.0,lon=0.0;
    char m0,m1,m2,m3,m4,m5,m6,m7;
    const char comma[2] = ",";



    int index=0,degrees;
    start:
    //is the incoming data is $gprmc?
    while((uart5_fr_r&0x0010) !=0);
    m0 = uart5_dr_r&0xff;
    if(m0 =='$'){
        while((uart5_fr_r&0x0010) !=0);
        m1 = uart5_dr_r &0xff;
        if(m1 == 'g'){
            while((uart5_fr_r&0x0010) !=0);
            m2 = uart5_dr_r&0xff;
            if(m2 == 'p'){
                while((uart5_fr_r&0x0010) !=0);
                m3 = uart5_dr_r&0xff;
                if(m3 == 'r'){
                    while((uart5_fr_r&0x0010) !=0);
                    m4 = uart5_dr_r&0xff;
                    if(m4 == 'm'){
                        while((uart5_fr_r&0x0010) !=0);
                        m5 = uart5_dr_r&0xff;
                        if(m5 == 'c'){
                            while((uart5_fr_r&0x0010) !=0);
                            m6 = uart5_dr_r&0xff;

                            if(m6 == ','){
                                while((uart5_fr_r&0x0010) !=0);
                                m7 = uart5_dr_r&0xff;

                                //assign the data to the gpsvalues array. read up to the last data checksum (like checksum: a*60)
                                while(m7 !='*'){
                                    gps_values[index] = m7; //20
                                    while((uart5_fr_r&0x0010) !=0);
                                    m7 = uart5_dr_r&0xff;
                                    index++;
                                }
                                //separating the data in the gpsvalues array by comma
                                index = 0;
                                token = strtok(gps_values,comma);
                                while( token != null ) {
                                    strcpy(parsevalue[index], token);
                                    token = strtok(null,comma);
                                    index++;}

                                //data valid if parsevalue[1] = a - not valid if =v
                                if(strcmp(parsevalue[1],"a")==0){
                                    check = 1;
                                    latitude=atof(parsevalue[2]);
                                    longitude=atof(parsevalue[4]);

                                    //latitude calculation
                                    degrees=latitude/100;
                                    minutes=latitude-(double)(degrees*100);
                                    seconds=minutes/60.00;
                                    lat=degrees+seconds;

                                    sprintf(latitudeis,"%f", lat);
                                    //print("%s\n",latitudeis);

                                    //longitude calculation
                                    degrees=longitude/100;
                                    minutes=longitude-(double)(degrees*100);
                                    seconds=minutes/60.00;
                                    lon=degrees+seconds;

                                    sprintf(longitudeis,"%f",lon);

                                    lat = lat;
                                    lon = lon;


                                    printf("lat = %s\n",latitudeis);
                                    printf("lon = %s\n\n\n",longitudeis);
                                   // lcd_command(0x01);
                                   // lcd_string(longitudeis);



                                }


                                else{

                                    printf("\error\n");

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (check == 0) { goto start; }
}
